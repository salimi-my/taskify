generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "mysql"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  tempEmail               String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole                @default(USER)
  isForceNewPassword      Boolean                 @default(false)
  password                String?
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  sessions                Session[]
  account                 Account?
  projectsAssignedToMe    UsersOnProjects[]
  tasks                   Task[]
  actions                 TaskAction[]            @relation("TaskActionUser")
  actionsAssignedToMe     TaskAction[]            @relation("TaskActionAssignee")
  tasksAssignedToMe       UsersOnTasks[]

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String     @id @default(cuid())
  sessionToken  String     @unique
  userId        String
  expires       DateTime
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([userId])
}

model VerificationToken {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  isUpdateEmail   Boolean   @default(false)
  expires         DateTime

  @@unique([userId, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String
  tasks         Task[]
  users         UsersOnProjects[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model UsersOnProjects {
  project    Project      @relation(fields: [projectId], references: [id])
  projectId  String
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime     @default(now())
  assignedBy String

  @@id([projectId, userId])
  @@index([userId])
}

enum TaskLabel {
  BUG
  FEATURE
  ENHANCEMENT
}

enum TaskStatus {
  OPEN
  TODO
  IN_PROGRESS
  CLOSED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskActionType {
  COMMENT
  ADD_ASSIGNEE
  REMOVE_ASSIGNEE
  ADD_LABEL
  REMOVE_LABEL
  ADD_PROJECT
  REMOVE_PROJECT
  OPEN
  CLOSE
  CANCEL
}

model Task {
  id         String           @id @default(cuid())
  userId     String           @unique
  projectId  String?
  title      String
  body       String           @db.Text
  label      TaskLabel
  status     TaskStatus
  priority   TaskPriority
  actions    TaskAction[]
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  assignees  UsersOnTasks[]

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([userId])
  @@index([projectId])
}

model TaskAction {
  id          String          @id @default(cuid())
  taskId      String          @unique
  userId      String          @unique
  comment     String?         @db.Text
  type        TaskActionType  @default(COMMENT)
  assigneeId  String?
  assignee    User?           @relation("TaskActionAssignee", fields: [assigneeId], references: [id])
  
  task        Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User            @relation("TaskActionUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([taskId, userId])
  @@index([assigneeId])
}

model UsersOnTasks {
  task    Task          @relation(fields: [taskId], references: [id])
  taskId  String
  user    User          @relation(fields: [userId], references: [id])
  userId  String
  assignedAt DateTime   @default(now())
  assignedBy String

  @@id([taskId, userId])
  @@index([userId])
}