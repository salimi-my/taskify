generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "mysql"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  tempEmail               String?
  emailVerified           DateTime?
  image                   String?
  role                    UserRole                @default(USER)
  isForceNewPassword      Boolean                 @default(false)
  password                String?
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  Session                 Session[]
  Account                 Account?

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Account {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?   @db.Text
  access_token              String?   @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?   @db.Text
  session_state             String?
  refresh_token_expires_in  Int?
  user                      User?     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String     @id @default(cuid())
  sessionToken  String     @unique
  userId        String
  expires       DateTime

  user          User       @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  isUpdateEmail   Boolean   @default(false)
  expires         DateTime

  @@unique([userId, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}